{"version":3,"sources":["core/utilities/history.js","components/common/header/index.js","components/common/layout/mainLayout.js","components/error/NotFound.js","scenes/home/styles.js","scenes/home/container.js","scenes/home/index.js","scenes/home/connector.js","routers/routes.js","core/reducers/agency.js","core/reducers/rootReducer.js","core/types/agency.js","core/store/index.js","components/app/index.js","serviceWorker.js","index.js"],"names":["history","createHistory","Header","_ref","intl","react_default","a","createElement","MainLayout","className","header","this","props","children","Component","NotFound","classes","makeStyles","theme","appBar","zIndex","drawer","hide","display","Home","state","drawerOpened","toogleDrawer","_this","bind","Object","assertThisInitialized","setState","AppBar","position","Toolbar","IconButton","color","aria-label","onClick","edge","clsx","menuButton","open","Menu_default","Typography","variant","Drawer","anchor","paper","drawerPaper","connect","agencies","agency","list","dispatch","Router","react_router_redux_es","react_router_dom_es","mainLayout","exact","path","component","defaultState","isLoading","error","rootReducer","combineReducers","arguments","length","undefined","action","type","objectSpread","payload","middleware","routerMiddleware","store","createStore","compose","applyMiddleware","thunkMiddleware","logger","App","es","routes","Boolean","window","location","hostname","match","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdeeda21.chunk.js","sourcesContent":["import createHistory from 'history/createBrowserHistory';\n\nconst history = createHistory();\n\nexport default history;","import React from 'react';\n\n// import './styles.css';\n\nconst Header = ({ intl }) => (\n  <header>\n    <h1>Weather Analytics</h1>\n  </header>\n);\n\nexport default Header;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from '../header';\n;\n\n// import './styles.css';\n\nclass MainLayout extends Component {\n  render() {\n    return (\n      <div className='layout'>\n        <Header />\n        <main className=\"layout__main\">\n          {this.props.children}\n        </main>\n      </div>\n    );\n  }\n\n}\nMainLayout.propTypes = {\n    children: PropTypes.element\n};\n\nexport default MainLayout;","import React from 'react';\n// import './styles.css';\n\nconst NotFound = () => (\n  <div className=\"not-found\">\n    <h1>Page not found</h1>\n    <p>Sorry, this page does not exist</p>\n  </div>\n);\n\n\nexport default NotFound;","import { makeStyles } from '@material-ui/core/styles';\n\nconst classes = makeStyles(theme => ({\n  // root: {\n  //   display: 'flex',\n  // },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  hide: {\n    display: 'none',\n  }\n  // drawer: {\n  //   width: drawerWidth,\n  //   flexShrink: 0,\n  // },\n  // drawerPaper: {\n  //   width: drawerWidth,\n  // },\n  // content: {\n  //   flexGrow: 1,\n  //   padding: theme.spacing(3),\n  // },\n  // toolbar: theme.mixins.toolbar,\n}));\n\nexport default classes;","import React, {Component} from 'react';\nimport clsx from 'clsx';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport Drawer from '@material-ui/core/Drawer';\n\nimport Filters from \"../../components/filters\"\n\nimport classes from \"./styles\";\n\n// import './styles.css';\n\nclass Home extends Component {\n  state = {\n    drawerOpened: true\n  }\n\n  toogleDrawer = this.toogleDrawer.bind(this);\n\n  toogleDrawer() {\n    this.setState({ drawerOpened: !this.drawerOpened });\n  }\n\n  render() {\n    return (\n      <div className='home'>\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"Open drawer\"\n            onClick={this.toogleDrawer}\n            edge=\"start\"\n            className={clsx(classes.menuButton, this.state.open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n            <Typography variant=\"h6\">Weather Data Analytics</Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={this.state.open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          HI\n\n        </Drawer>\n      </div>\n    );\n  }\n\n}\n\nexport default Home;","import Home from \"./connector\";\n\nexport default Home;\n","import { connect } from \"react-redux\";\n\nimport Home from \"./container\";\n\nconst mapStateToProps = state => ({\n  agencies: state.agency.list\n});\n\nconst mapDispatchToProps = dispatch => ({\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from 'react';\nimport history from '../core/utilities/history';\n\nimport { Route, Switch } from 'react-router-dom';\nimport { ConnectedRouter } from 'react-router-redux';\n\nimport MainLayout from '../components/common/layout/mainLayout';\nimport NotFound from '../components/error/NotFound';\nimport Home from '../scenes/home';\n\nconst Router = () => (\n    <ConnectedRouter history={history}>\n        <Switch>\n          <MainLayout>\n              <Switch>\n                  <Route exact path='/' component={Home}/>\n              </Switch>\n          </MainLayout>\n          <Route component={NotFound}/>\n        </Switch>\n    </ConnectedRouter>\n);\n\nexport default Router;\n","import { \n  GET_AGENCIES_SUCESS,\n  GET_AGENCIES_FAILURE,\n  GET_AGENCIES_LOADING \n} from '../types/agency';\n\nconst defaultState = {\n  list: [],\n  isLoading: false,\n  error: ''\n};\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case GET_AGENCIES_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n        error: '',\n        list: []\n      };\n    case GET_AGENCIES_SUCESS:\n      return {\n        ...state,\n        isLoading: false,\n        error: '',\n        list: action.payload\n      };\n    case GET_AGENCIES_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n        list: []\n      };\n    default:\n      return { ...state };\n  }\n};\n","import {combineReducers} from 'redux';\n\nimport agency from './agency';\n\nconst rootReducer = combineReducers({\n  agency\n});\n\nexport default rootReducer;","export const GET_AGENCIES_SUCESS = 'GET_AGENCIES_SUCCESS';\nexport const GET_AGENCIES_FAILURE = 'GET_AGENCIES_FAILURE';\nexport const GET_AGENCIES_LOADING = 'GET_AGENCIES_LOADING';\n\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport { routerMiddleware } from 'react-router-redux';\n\nimport thunkMiddleware from 'redux-thunk';\nimport history from '../utilities/history';\nimport rootReducer from '../reducers/rootReducer';\nimport logger from 'redux-logger';\n\nconst middleware = routerMiddleware(history);\n\nconst store = createStore(rootReducer, compose(\n    applyMiddleware(thunkMiddleware, middleware, logger)\n));\n\nexport default store;","import React from 'react';\nimport { Provider } from \"react-redux\";\n\nimport MainRouter from '../../routers/routes';\nimport store from \"../../core/store\";\n\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <MainRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}